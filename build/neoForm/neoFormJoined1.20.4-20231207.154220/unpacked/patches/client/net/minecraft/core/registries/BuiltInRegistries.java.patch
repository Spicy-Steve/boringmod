--- a/net/minecraft/core/registries/BuiltInRegistries.java
+++ b/net/minecraft/core/registries/BuiltInRegistries.java
@@ -157,7 +157,7 @@
     public static final Registry<PositionSourceType<?>> POSITION_SOURCE_TYPE = registerSimple(
         Registries.POSITION_SOURCE_TYPE, p_259113_ -> PositionSourceType.BLOCK
     );
-    public static final Registry<ArgumentTypeInfo<?, ?>> COMMAND_ARGUMENT_TYPE = registerSimple(Registries.COMMAND_ARGUMENT_TYPE, ArgumentTypeInfos::bootstrap);
+    public static final Registry<ArgumentTypeInfo<?, ?>> COMMAND_ARGUMENT_TYPE = registerSimple(Registries.COMMAND_ARGUMENT_TYPE, (RegistryBootstrap)ArgumentTypeInfos::bootstrap);
     public static final Registry<StatType<?>> STAT_TYPE = registerSimple(Registries.STAT_TYPE, p_259967_ -> Stats.ITEM_USED);
     public static final DefaultedRegistry<VillagerType> VILLAGER_TYPE = registerDefaulted(Registries.VILLAGER_TYPE, "plains", p_259473_ -> VillagerType.PLAINS);
     public static final DefaultedRegistry<VillagerProfession> VILLAGER_PROFESSION = registerDefaulted(
@@ -227,21 +227,21 @@
         Registries.FEATURE_SIZE_TYPE, p_259370_ -> FeatureSizeType.TWO_LAYERS_FEATURE_SIZE
     );
     public static final Registry<Codec<? extends BiomeSource>> BIOME_SOURCE = registerSimple(
-        Registries.BIOME_SOURCE, Lifecycle.stable(), BiomeSources::bootstrap
+        Registries.BIOME_SOURCE, Lifecycle.stable(), (RegistryBootstrap)BiomeSources::bootstrap
     );
     public static final Registry<Codec<? extends ChunkGenerator>> CHUNK_GENERATOR = registerSimple(
-        Registries.CHUNK_GENERATOR, Lifecycle.stable(), ChunkGenerators::bootstrap
+        Registries.CHUNK_GENERATOR, Lifecycle.stable(), (RegistryBootstrap)ChunkGenerators::bootstrap
     );
     public static final Registry<Codec<? extends SurfaceRules.ConditionSource>> MATERIAL_CONDITION = registerSimple(
-        Registries.MATERIAL_CONDITION, SurfaceRules.ConditionSource::bootstrap
+        Registries.MATERIAL_CONDITION, (RegistryBootstrap)SurfaceRules.ConditionSource::bootstrap
     );
     public static final Registry<Codec<? extends SurfaceRules.RuleSource>> MATERIAL_RULE = registerSimple(
-        Registries.MATERIAL_RULE, SurfaceRules.RuleSource::bootstrap
+        Registries.MATERIAL_RULE, (RegistryBootstrap)SurfaceRules.RuleSource::bootstrap
     );
     public static final Registry<Codec<? extends DensityFunction>> DENSITY_FUNCTION_TYPE = registerSimple(
-        Registries.DENSITY_FUNCTION_TYPE, DensityFunctions::bootstrap
+        Registries.DENSITY_FUNCTION_TYPE, (RegistryBootstrap)DensityFunctions::bootstrap
     );
-    public static final Registry<MapCodec<? extends Block>> BLOCK_TYPE = registerSimple(Registries.BLOCK_TYPE, BlockTypes::bootstrap);
+    public static final Registry<MapCodec<? extends Block>> BLOCK_TYPE = registerSimple(Registries.BLOCK_TYPE, (RegistryBootstrap)BlockTypes::bootstrap);
     public static final Registry<StructureProcessorType<?>> STRUCTURE_PROCESSOR = registerSimple(
         Registries.STRUCTURE_PROCESSOR, p_259305_ -> StructureProcessorType.BLOCK_IGNORE
     );
@@ -249,7 +249,7 @@
         Registries.STRUCTURE_POOL_ELEMENT, p_259361_ -> StructurePoolElementType.EMPTY
     );
     public static final Registry<Codec<? extends PoolAliasBinding>> POOL_ALIAS_BINDING_TYPE = registerSimple(
-        Registries.POOL_ALIAS_BINDING, PoolAliasBindings::bootstrap
+        Registries.POOL_ALIAS_BINDING, (RegistryBootstrap)PoolAliasBindings::bootstrap
     );
     public static final Registry<CatVariant> CAT_VARIANT = registerSimple(Registries.CAT_VARIANT, CatVariant::bootstrap);
     public static final Registry<FrogVariant> FROG_VARIANT = registerSimple(Registries.FROG_VARIANT, p_259261_ -> FrogVariant.TEMPERATE);
@@ -257,8 +257,8 @@
     public static final Registry<Instrument> INSTRUMENT = registerSimple(Registries.INSTRUMENT, Instruments::bootstrap);
     public static final Registry<String> DECORATED_POT_PATTERNS = registerSimple(Registries.DECORATED_POT_PATTERNS, DecoratedPotPatterns::bootstrap);
     public static final Registry<CreativeModeTab> CREATIVE_MODE_TAB = registerSimple(Registries.CREATIVE_MODE_TAB, CreativeModeTabs::bootstrap);
-    public static final Registry<CriterionTrigger<?>> TRIGGER_TYPES = registerSimple(Registries.TRIGGER_TYPE, CriteriaTriggers::bootstrap);
-    public static final Registry<NumberFormatType<?>> NUMBER_FORMAT_TYPE = registerSimple(Registries.NUMBER_FORMAT_TYPE, NumberFormatTypes::bootstrap);
+    public static final Registry<CriterionTrigger<?>> TRIGGER_TYPES = registerSimple(Registries.TRIGGER_TYPE, (RegistryBootstrap)CriteriaTriggers::bootstrap);
+    public static final Registry<NumberFormatType<?>> NUMBER_FORMAT_TYPE = registerSimple(Registries.NUMBER_FORMAT_TYPE, (RegistryBootstrap)NumberFormatTypes::bootstrap);
     public static final Registry<? extends Registry<?>> REGISTRY = WRITABLE_REGISTRY;
 
     private static <T> Registry<T> registerSimple(ResourceKey<? extends Registry<T>> p_260095_, BuiltInRegistries.RegistryBootstrap<T> p_259057_) {
@@ -307,7 +307,7 @@
         Bootstrap.checkBootstrapCalled(() -> "registry " + p_259230_);
         ResourceLocation resourcelocation = p_259230_.location();
         LOADERS.put(resourcelocation, () -> p_259210_.run(p_260327_));
-        WRITABLE_REGISTRY.register(p_259230_, p_260327_, p_259258_);
+        WRITABLE_REGISTRY.register((ResourceKey)p_259230_, p_260327_, p_259258_);
         return p_260327_;
     }
 
